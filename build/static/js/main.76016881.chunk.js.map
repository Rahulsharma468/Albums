{"version":3,"sources":["componenets/Title.js","firebase/config.js","hooks/UseStorage.js","componenets/ProgressBar.js","componenets/UploadForm.js","hooks/UseFirestore.js","componenets/ImagesGrid.js","componenets/Model.js","App.js","reportWebVitals.js","index.js"],"names":["Title","className","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","p_storage","storage","p_firestore","firestore","timeStamp","FieldValue","serverTimestamp","UseStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storage_ref","ref","name","collection_ref","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","style","width","UploadForm","allwoedtypes","type","onChange","e","preventDefault","selected","target","files","includes","UseFirestore","docs","settDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","map","onClick","src","alt","Model","selectedImg","classList","contains","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","trainings","price","document","getElementById"],"mappings":"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","file":"static/js/main.76016881.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Title = () => {\r\n    return(\r\n        <div className=\"title\">\r\n            <h1>Album</h1>\r\n            <h2>Pictures</h2>\r\n            <p>Try This awesome Website Guys</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title;","import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyA24SC9vn4RCjUbT6brF_K91Q_XlgSoJ80\",\r\n    authDomain: \"album-6e606.firebaseapp.com\",\r\n    databaseURL: \"https://album-6e606-default-rtdb.firebaseio.com\",\r\n    projectId: \"album-6e606\",\r\n    storageBucket: \"album-6e606.appspot.com\",\r\n    messagingSenderId: \"41087528503\",\r\n    appId: \"1:41087528503:web:4eade576043ef40a0159b2\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n\r\nconst p_storage = firebase.storage();\r\n\r\nconst p_firestore = firebase.firestore();\r\n\r\nconst timeStamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport {\r\n    p_storage , p_firestore , timeStamp\r\n};","import { useState , useEffect } from 'react';\r\nimport { p_storage , p_firestore, timeStamp } from '../firebase/config';\r\n\r\nconst UseStorage = (file) => {\r\n    const [progress ,setProgress] = useState(0);\r\n    const [error ,setError] = useState(null);\r\n    const [url ,setUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        //reference to where save file\r\n        const storage_ref = p_storage.ref(file.name);\r\n        const collection_ref = p_firestore.collection('images');\r\n\r\n        storage_ref.put(file).on('state_changed' , (snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage);\r\n        } , (err) => {\r\n            setError(err)\r\n        } , async() => {\r\n            const url = await storage_ref.getDownloadURL();\r\n            const createdAt = timeStamp();\r\n            collection_ref.add({\r\n                url: url,\r\n                createdAt: createdAt\r\n            })\r\n            setUrl(url);\r\n        })\r\n    } , [file]);\r\n\r\n    return { progress , url , error }\r\n}\r\n\r\nexport default UseStorage;","import React , {useEffect} from 'react';\r\nimport UseStorage from '../hooks/UseStorage';\r\n\r\nconst ProgressBar = ({ file , setFile }) => {\r\n\r\n    const { url , progress } = UseStorage(file);\r\n\r\n    useEffect(() => {\r\n        if(url){\r\n            setFile(null);\r\n        }\r\n    }, [url , setFile]);\r\n\r\n    return(\r\n        <div className=\"progress_bar\" style={{ width: progress + '%' }}></div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar;","import React , {useState} from 'react';\r\nimport ProgressBar from './ProgressBar';\r\n\r\nconst UploadForm = () => {\r\n    const [file, setFile] = useState(null);\r\n    const [error , setError] = useState(null);\r\n\r\n    const allwoedtypes = ['image/png' , 'image/jpeg' , 'image/jpg'];\r\n\r\n    const changeHandler = (e) => {\r\n        e.preventDefault();\r\n        let selected = e.target.files[0];\r\n\r\n        if(selected && allwoedtypes.includes(selected.type)){\r\n            setFile(selected);\r\n            setError(' ');\r\n        }else{\r\n            setFile(null);\r\n            setError('Please use a valid file type --> png or jpeg or jpg');\r\n        }\r\n    }\r\n\r\n    return(\r\n     <form>\r\n        <label>\r\n            <input type=\"file\" onChange={changeHandler} />\r\n            <span>+</span>\r\n        </label>\r\n         <div className=\"output\">\r\n             { error && <div className=\"error\">{ error }</div>}\r\n             { file && <div>{file.name}</div>}\r\n             { file && <ProgressBar file={file} setFile={setFile} />}\r\n         </div>\r\n     </form>   \r\n    )\r\n}\r\n\r\nexport default UploadForm;","import { useState , useEffect } from 'react';\r\nimport { p_firestore } from '../firebase/config';\r\n\r\nconst UseFirestore = (collection) => {\r\n    const [docs , settDocs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const unsub = p_firestore.collection(collection)\r\n        .orderBy('createdAt' , 'desc')\r\n            .onSnapshot((snap) => {\r\n                let documents = [];\r\n                snap.forEach(doc => {\r\n                    documents.push({ ...doc.data() , id: doc.id })\r\n                });\r\n                settDocs(documents);\r\n            });\r\n\r\n            return () => unsub();\r\n\r\n    } , [collection])\r\n\r\n    return { docs };\r\n}\r\n\r\nexport default UseFirestore;","import React from 'react';\r\nimport UseFirestore from '../hooks/UseFirestore';\r\n\r\nconst ImageGrid = ({ setSelectedImg}) => {\r\n    const { docs } = UseFirestore('images')\r\n    return(\r\n        <div className=\"img_grid\">\r\n            { docs && docs.map(doc => (\r\n                <div className=\"img_wrap\" key={doc.id} onClick={() => setSelectedImg(doc.url)}>\r\n                    <img src={doc.url} alt=\"left _ upload\" />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageGrid;","import React from 'react';\r\n\r\nconst Model = ({selectedImg , setSelectedImg}) => {\r\n\r\n    const handleClick = (e) => {\r\n        if(e.target.classList.contains('backdrop'))\r\n        setSelectedImg(null)\r\n    }\r\n\r\n    return(\r\n        <div className=\"backdrop\" onClick={handleClick} >\r\n            <img src={selectedImg} alt=\"enlarged_pic\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Model;","import React , { useState } from 'react';\nimport Title from './componenets/Title';\nimport UploadForm from './componenets/UploadForm';\nimport ImageGrid from './componenets/ImagesGrid';\nimport Model from './componenets/Model';\n\nfunction App() {\n\n  const [selectedImg , setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      { selectedImg && <Model selectedImg={selectedImg} setSelectedImg={setSelectedImg} /> }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nvar tainings = [\n  {name:\"web\" , price:400} , \n  {name:\"android\" , price:500},\n  {name:\"ml\" , price:700},\n  {name:\"ai\" , price:4007},\n  {name:\"mc\" , price:4060}\n]\n\nReactDOM.render(\n    <App trainings={tainings} /> ,\n    \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}